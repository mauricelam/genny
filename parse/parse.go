package parse

import (
	"bufio"
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"io"
	"os"
	"reflect"
	"regexp"
	"strings"
	"unicode"

	"golang.org/x/tools/go/ast/astutil"
	"golang.org/x/tools/imports"
)

type isExported bool

var header = []byte(`

// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/CanDIG/genny

`)

var importBlock = `import (
	%s
)`

var (
	packageKeyword = []byte("package")
	importKeyword  = []byte("import")
	openBrace      = []byte("(")
	closeBrace     = []byte(")")
	space          = " "
	genericPackage = "generic"
	genericType    = "generic.Type"
	genericNumber  = "generic.Number"
	linefeed       = "\r\n"
)
var unwantedLinePrefixes = [][]byte{
	[]byte("//go:generate genny "),
	[]byte("//go:generate $GOPATH/bin/genny "),
}

func generateSpecific(filename string, in io.ReadSeeker, typeSet map[string]string) ([]byte, error) {

	// ensure we are at the beginning of the file
	in.Seek(0, os.SEEK_SET)

	// parse the source file
	fs := token.NewFileSet()
	file, err := parser.ParseFile(fs, filename, in, 0)
	if err != nil {
		return nil, &errSource{Err: err}
	}

	// make sure every generic.Type is represented in the types
	// argument.
	for _, decl := range file.Decls {
		switch it := decl.(type) {
		case *ast.GenDecl:
			for _, spec := range it.Specs {
				ts, ok := spec.(*ast.TypeSpec)
				if !ok {
					continue
				}
				switch tt := ts.Type.(type) {
				case *ast.SelectorExpr:
					if name, ok := tt.X.(*ast.Ident); ok {
						if name.Name == genericPackage {
							if _, ok := typeSet[ts.Name.Name]; !ok {
								return nil, &errMissingSpecificType{GenericType: ts.Name.Name}
							}
						}
					}
				}
			}
		}
	}

	// go back to the start of the file
	in.Seek(0, os.SEEK_SET)

	var buf bytes.Buffer

	comment := ""
	scanner := bufio.NewScanner(in)
	reInterfaceBegin := regexp.MustCompile(`^\s*type\s+\w+\s+interface\s*\{`)
	reInterfaceEnd := regexp.MustCompile(`^\s*\}`)
	var interfaceLines []string
	interfaceContainsType := false
	for scanner.Scan() {

		l := scanner.Text()

		if reInterfaceBegin.MatchString(l) {
			interfaceLines = []string{l}
		}

		if len(interfaceLines) > 0 && reInterfaceEnd.MatchString(l) {
			if !interfaceContainsType {
				for _, li := range append(interfaceLines, l) {
					buf.WriteString(li)
				}
			}
			interfaceLines, interfaceContainsType = nil, false
			continue
		}

		// does this line contain generic.Type?
		if strings.Contains(l, genericType) || strings.Contains(l, genericNumber) {
			comment = ""
			if len(interfaceLines) > 0 {
				interfaceContainsType = true
			}
			continue
		}

		for t, specificType := range typeSet {
			// replace any instances in the line of the generic type in the exported syntax
			tExported := string(unicode.ToUpper(rune(t[0]))) + t[1:]
			l = searchAndReplace(l, tExported, specificType)

			// replace any instances in the line of the generic type in the unexported syntax
			tUnexported := string(unicode.ToLower(rune(t[0]))) + t[1:]
			l = searchAndReplace(l, tUnexported, specificType)
		}

		if comment != "" {
			buf.WriteString(line(comment))
			comment = ""
		}

		// is this line a comment?
		// TODO: should we handle /* */ comments?
		if strings.HasPrefix(l, "//") {
			// record this line to print later
			comment = l
			continue
		}

		// write the line
		if len(interfaceLines) > 0 {
			interfaceLines = append(interfaceLines, l)
		} else {
			buf.WriteString(line(l))
		}
	}

	// write trailing comment, if any
	if comment != "" {
		buf.WriteString(line(comment))
		comment = ""
	}

	// write it out
	return buf.Bytes(), nil
}

// Generics parses the source file and generates the bytes replacing the
// generic types for the keys map with the specific types (its value).
func Generics(filename, pkgName string, in io.ReadSeeker, typeSets []map[string]string, importPaths []string, stripTag string, useAstImpl bool) ([]byte, error) {
	localUnwantedLinePrefixes := [][]byte{}
	for _, ulp := range unwantedLinePrefixes {
		localUnwantedLinePrefixes = append(localUnwantedLinePrefixes, ulp)
	}

	if stripTag != "" {
		localUnwantedLinePrefixes = append(localUnwantedLinePrefixes, []byte(fmt.Sprintf("// +build %s", stripTag)))
	}

	packageLine := ""
	var collectedImports stringArraySet
	totalOutput := []byte{}

	for _, typeSet := range typeSets {

		// generate the specifics
		var parsed []byte
		var err error
		if useAstImpl {
			parsed, err = generateSpecificAst(filename, in, typeSet)
		} else {
			parsed, err = generateSpecific(filename, in, typeSet)
		}
		if err != nil {
			return nil, err
		}

		totalOutput = append(totalOutput, parsed...)
	}

	// clean up the code line by line
	packageFound := false
	insideImportBlock := false
	var outputLines []string
	scanner := bufio.NewScanner(bytes.NewReader(totalOutput))
	for scanner.Scan() {

		// end of imports block?
		if insideImportBlock {
			if bytes.HasSuffix(scanner.Bytes(), closeBrace) {
				insideImportBlock = false
			} else {
				collectedImports = collectedImports.append(line(scanner.Text()))
			}

			continue
		}

		if bytes.HasPrefix(scanner.Bytes(), packageKeyword) {
			if packageFound {
				continue
			} else {
				packageFound = true
				packageLine = line(scanner.Text())
				continue
			}
		} else if bytes.HasPrefix(scanner.Bytes(), importKeyword) {
			if bytes.HasSuffix(scanner.Bytes(), openBrace) {
				insideImportBlock = true
			} else {
				importLine := strings.TrimSpace(line(scanner.Text()))
				importLine = strings.TrimSpace(importLine[6:])
				collectedImports = collectedImports.append(importLine)
			}

			continue
		}

		// check all unwantedLinePrefixes - and skip them
		skipline := false
		for _, prefix := range localUnwantedLinePrefixes {
			if bytes.HasPrefix(scanner.Bytes(), prefix) {
				skipline = true
				continue
			}
		}

		if skipline {
			continue
		}

		outputLines = append(outputLines, line(scanner.Text()))
	}

	cleanOutputLines := []string{
		string(header),
		packageLine,
		fmt.Sprintln("import ("),
	}
	for _, importLine := range collectedImports {
		cleanOutputLines = append(cleanOutputLines, fmt.Sprintln(importLine))
	}
	cleanOutputLines = append(cleanOutputLines, fmt.Sprintln(")"))

	cleanOutputLines = append(cleanOutputLines, outputLines...)

	cleanOutput := strings.Join(cleanOutputLines, "")

	output := []byte(cleanOutput)
	var err error

	// change package name
	if pkgName != "" {
		output = changePackage(bytes.NewReader([]byte(output)), pkgName)
	}
	if len(importPaths) > 0 {
		output = addImports(bytes.NewReader(output), importPaths)
	}
	// fix the imports
	output, err = imports.Process(filename, output, nil)
	if err != nil {
		return nil, &errImports{Err: err}
	}

	return output, nil
}

func line(s string) string {
	return fmt.Sprintln(strings.TrimRight(s, linefeed))
}

// isAlphaNumeric gets whether the rune is alphanumeric or _.
func isAlphaNumeric(r rune) bool {
	return r == '_' || unicode.IsLetter(r) || unicode.IsDigit(r)
}

// searchAndReplace searches a line of text for an exact match to a type (case-sensitive) and replaces it with
// another type at the same index.
// Returns the updated line of text.
func searchAndReplace(l string, t string, specificType string) string {
	if strings.Contains(l, t) {

		var newLine string
		// check each word
		for _, word := range strings.Fields(l) {

			i := 0
			for {
				i += strings.Index(word[i:], t) // find out where in the word the generic type begins

				if i > -1 {
					if i > 0 && isAlphaNumeric(rune(word[i-1])) || i < len(word)-len(t) && isAlphaNumeric(rune(word[i+len(t)])) {
						// replace the word with with its exported or unexported specific replacement
						word = strings.Replace(word, t, wordify(specificType, unicode.IsUpper(rune(strings.TrimLeft(word, "*&")[i]))), 1)
					} else {
						// replace the word as is
						word = strings.Replace(word, t, typify(specificType), 1)
					}
				} else {
					newLine = newLine + word + space
					break
				}

			}
		}

		l = newLine
	}
	return l
}

// wordify turns a type into a nice word for function and type
// names etc.
// If s matches format `<Title>:<Type>` then <Title> is returned
func wordify(s string, exported bool) string {
	if sepIdx := strings.Index(s, ":"); sepIdx >= 0 {
		s = s[:sepIdx]
	} else {
		s = strings.TrimRight(s, "{}")
		s = strings.TrimLeft(s, "*&")
		s = strings.Replace(s, ".", "", -1)
	}
	if !exported {
		return strings.ToLower(string(s[0])) + s[1:]
	}
	return strings.ToUpper(string(s[0])) + s[1:]
}

// typify gets type name from string.
// if string contains ":" then right part is returned otherwise string itself is returned
func typify(s string) string {
	if sepIdx := strings.Index(s, ":"); sepIdx >= 0 {
		return s[sepIdx+1:]
	}
	return s
}

func changePackage(r io.Reader, pkgName string) []byte {
	var out bytes.Buffer
	sc := bufio.NewScanner(r)
	done := false

	for sc.Scan() {
		s := sc.Text()

		if !done && strings.HasPrefix(s, "package") {
			parts := strings.Split(s, " ")
			parts[1] = pkgName
			s = strings.Join(parts, " ")
			done = true
		}

		fmt.Fprintln(&out, s)
	}
	return out.Bytes()
}

func addImports(r io.Reader, importPaths []string) []byte {
	var out bytes.Buffer
	sc := bufio.NewScanner(r)
	done := false

	for sc.Scan() {
		s := sc.Text()

		if !done && strings.HasPrefix(s, "package") {
			fmt.Fprintln(&out, s)
			for _, imp := range importPaths {
				fmt.Fprintf(&out, "import \"%s\"\n", imp)
			}
			done = true
			continue
		}

		fmt.Fprintln(&out, s)
	}
	return out.Bytes()
}

// ===== Start AST related implementation =====

type replaceSpec struct {
	genericType string
	specificType string
}

func (rs replaceSpec) toType() string {
	return typify(rs.specificType)
}

func (rs replaceSpec) toWord(uppercase bool) string {
	return wordify(rs.specificType, uppercase)
}

func (rs replaceSpec) String() string {
	return fmt.Sprintf("%s -> %s", rs.genericType, rs.specificType)
}

func deleteAllComments(file *ast.File, root ast.Node) {
	ast.Inspect(root, func (n ast.Node) bool {
		if comment, ok := n.(*ast.CommentGroup); ok {
			deleteComment(file, comment)
		}
		return true
	})
}

func deleteComment(file *ast.File, comment *ast.CommentGroup) {
	for i, com := range file.Comments {
		if com == comment {
			file.Comments = append(file.Comments[:i], file.Comments[i+1:]...)
			break
		}
	}
}

func transformText(re *regexp.Regexp, text string, spec replaceSpec) string {
	return re.ReplaceAllStringFunc(text, func(match string) string {
		return spec.toWord(unicode.IsUpper(rune(match[0])))
	})
}

func transformType(re *regexp.Regexp, ident *ast.Ident, spec replaceSpec, log string) *ast.Ident {
	if ident.Name != spec.genericType {
		// If they are not identical, the type is something like genericQueue. Perform normal text
		// transformation
		return transformIdentifier(re, ident, spec, log)
	}
	output := *ident
	output.Name = spec.toType()
	return &output
}

func transformIdentifier(re *regexp.Regexp, ident *ast.Ident, spec replaceSpec, log string) *ast.Ident {
	transformed := transformText(re, ident.Name, spec)

	output := *ident
	output.Name = transformed
	return &output
}

func generateSpecificType(fs *token.FileSet, file *ast.File, spec replaceSpec) {
	re := regexp.MustCompile("(?i)" + spec.genericType)

	astutil.Apply(file,
		func(c *astutil.Cursor) bool {
			switch v := c.Node().(type) {
			case *ast.Ident:
				var newIdent *ast.Ident
				if containsFold(v.Name, spec.genericType) {
					switch p := c.Parent().(type) {
					case *ast.ArrayType:
						// []generic
						// []genericValue
						newIdent = transformType(re, v, spec, "ARRAY TYPE")
					case *ast.ValueSpec:
						if v == p.Type {
							// var something generic
							// var something genericValue
							newIdent = transformType(re, v, spec, "VALUE TYPE")
						} else {
							// var generic string
							// var genericVariable string
							newIdent = transformIdentifier(re, v, spec, "VARNAME")
						}
					case *ast.CallExpr:
						if v == p.Fun {
							// generic(something), a.k.a. type conversion
							// genericSomething(something)
							newIdent = transformType(re, v, spec, "TYPE CONVERSION")
						} else {
							// myfunc(generic)
							// myfunc(genericVariable)
							newIdent = transformIdentifier(re, v, spec, "ARG VARNAME")
						}
					case *ast.TypeSpec:
						if v == p.Name {
							// type generic someType
							// type genericValue someType
							newIdent = transformIdentifier(re, v, spec, "TYPE NAME")
						} else {
							// type newType generic
							// type newType genericSomething
							newIdent = transformType(re, v, spec, "TYPE VALUE")
						}
					case *ast.Field:
						if v == p.Type {
							// func a(g generic) or func a(g genericValue)
							newIdent = transformType(re, v, spec, "FIELD TYPE")
						} else {
							// func a(genericSomething someType)
							newIdent = transformIdentifier(re, v, spec, "ARG DECL NAME")
						}
					case *ast.FuncDecl:
						// func PrintGeneric()
						newIdent = transformIdentifier(re, v, spec, "FUNC NAME")
					case *ast.SelectorExpr:
						// a.PrintMyType()
						newIdent = transformIdentifier(re, v, spec, "SELECTOR")
					case *ast.StarExpr:
						// *generic or *somethingGeneric
						newIdent = transformType(re, v, spec, "STAR EXPR")
					case *ast.CompositeLit:
						if v == p.Type {
							// myGen := generic{field1: 1, field2: 2}
							newIdent = transformType(re, v, spec, "COMPOSITE LITERAL")
						}
					case *ast.MapType:
						// var m map[generic]myvalue
						// var m map[mykey]generic
						newIdent = transformType(re, v, spec, "MAP TYPE")
					case *ast.KeyValueExpr:
						// MyStruct{ field: genericVal }
						// MyStruct{ genericVal: field }
						newIdent = transformType(re, v, spec, "KEY VALUE EXPR")
					case *ast.BranchStmt:
						// ignore
					case *ast.File:
						fmt.Println("UNRESOLVED???", v.Name, spec, reflect.TypeOf(c.Parent()))
					default:
						fmt.Println(">>>>>", v.Name, spec, reflect.TypeOf(c.Parent()))
					}
				}
				if newIdent != nil {
					c.Replace(newIdent)
				}
			case *ast.Comment:
				// Replace the comments
				newComment := *v
				newComment.Text = transformText(re, v.Text, spec)
				c.Replace(&newComment)
			case *ast.TypeSpec:
				if isGenericTypeDefinition(v) {
					deleteAllComments(file, v)
					c.Delete()
				}
			}
			return true
		},
		func (c *astutil.Cursor) bool {
			switch v := c.Node().(type) {
			case *ast.GenDecl:
				// If the declaration became empty after removing `type myType generic.Type`,
				// remove the declaration as well
				if len(v.Specs) == 0 {
					deleteComment(file, v.Doc)
					c.Delete()
				}
			}
			return true
		})
}

func isGenericTypeDefinition(typeSpec *ast.TypeSpec) bool {
	switch t := typeSpec.Type.(type) {
	case *ast.SelectorExpr:
		return isGenericTypeSelector(t)
	case *ast.InterfaceType:
		for _, field := range t.Methods.List {
			// TODO: need to check new specific type also implements the other methods in the
			// interface?
			if selector, ok := field.Type.(*ast.SelectorExpr); ok {
				if isGenericTypeSelector(selector) {
					return true
				}
			}
		}
	}
	return false
}

func isGenericTypeSelector(selector *ast.SelectorExpr) bool {
	if ident, ok := selector.X.(*ast.Ident); ok {
		if ident.Name == "generic" &&
				(selector.Sel.Name == "Type" || selector.Sel.Name == "Number") {
			return true
		}
	}
	return false
}

func generateSpecificAst(filename string, in io.ReadSeeker, typeSet map[string]string) ([]byte, error) {

	// ensure we are at the beginning of the file
	in.Seek(0, os.SEEK_SET)

	// parse the source file
	fs := token.NewFileSet()
	file, err := parser.ParseFile(fs, filename, in, parser.ParseComments)
	if err != nil {
		return nil, &errSource{Err: err}
	}

	// make sure every generic.Type is represented in the types
	// argument.
	for _, decl := range file.Decls {
		switch it := decl.(type) {
		case *ast.GenDecl:
			for _, spec := range it.Specs {
				ts, ok := spec.(*ast.TypeSpec)
				if !ok {
					continue
				}
				switch tt := ts.Type.(type) {
				case *ast.SelectorExpr:
					if name, ok := tt.X.(*ast.Ident); ok {
						if name.Name == genericPackage {
							if _, ok := typeSet[ts.Name.Name]; !ok {
								return nil, &errMissingSpecificType{GenericType: ts.Name.Name}
							}
						}
					}
				}
			}
		}
	}

	var buf bytes.Buffer
	for t, specificType := range typeSet {
		generateSpecificType(fs, file, replaceSpec{ t, specificType })
	}

	err = printer.Fprint(&buf, fs, file)
	return buf.Bytes(), err
}

func containsFold(s, substring string) bool {
	return strings.Contains(strings.ToLower(s), strings.ToLower(substring))
}
